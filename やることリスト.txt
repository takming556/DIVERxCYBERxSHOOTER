・自機のHPを表示
・弾のスプライト変更・実装
✅ボスの状態遷移時に遷移前の弾がフィールドに残留する問題の解決
✅ゲームオーバー後は自機の操作を禁止する
✅ゲームオーバー後は生存ボーナスの加算を停止する
✅ゲームオーバー後に何らかのキー操作でニックネーム入力画面に遷移する
・ゲームバランスの調整
・テスト用のデータベースを立ててもらう
・ニックネーム入力の初期文字を半角スペースにする
✅ゲーム開始時にDebugParamsをINITIALIZEする
✅ニックネーム入力画面においてZ, Xキー押下時に音を鳴らす
・もふの登場をもっと勿体ぶる
✅2回目以降のプレイでスコアが正常に計上されていない問題の解決
✅2回目以降のプレイでGAMEOVER, GAMECLEARが正しく描画されていない問題の解決
・2回目以降のプレイでSQLに何らかの問題が発生する問題の解決
・自機クラッシュ時に音を鳴らす
・ゲームクリア時は、自機の残りHPの値に応じてスコアを加点する
・アップデートを続けていく旨の表示と、ランキングの案内、dezisou.comの宣伝の表示
✅オブジェクトの存在範囲限界を実装
✅MyCharacterの移動範囲限界を実装
✅VISIBLE_BOUNDARYはいらない
✅InFieldPositionクラスのget_draw_position()の位置ズレを修正
✅ZkChrStg1Wv5S, ZkChrStg1Wv5Lを実装
✅ZkChr::SHOT_SPEEDを定義する
✅ZkChr::INITIAL_HP→ZkChr::HP
✅生存ボーナスを与えるべきではないシチュエーションでは生存ボーナスの加算を停止する
✅サウンド実装
✅フィールド背景実装
✅スクリーン背景実装
✅ロゴ実装
✅タイトル画面実装
✅ゲームオーバー画面実装
✅クリア画面実装
✅ボス戦のStatus遷移時に前Statusの弾をFieldから消す
・リザルト画面実装
✅ニックネーム入力画面実装
✅SQL通信実装
・海月もふのボス戦を実装
・アイテムドロップを実装
・上部回収を実装
✅スコア計算式を設計
・ゲームバランスの調整
・ボス戦直前直後の会話を実装
・ボス戦まえのカットイン演出を実装
・BGMを実装
✅SEを実装
・画像描画に乗算済みアルファを適用してアンチエイリアスする
・Stage3を実装
・Stage2を実装
✅InFieldPositionの座標系をとりなおす
✅EnemyCharacterのHP, MyCharacterのlife, Offensiveのdurabilityを表示するデバッグ表示の実装
✅ゲームの経過時間カウンター表示を実装(DebugParamsとして)
✅当たり判定クラスCollideRealmを実装する
✅台本クラスScenarioを実装する
✅弾幕クラスBarrageを実装する
✅MyCharacterが斜めに動くと√2倍の速さで動けてしまう問題の解決
✅当たり判定まる見えモード実装（デバッグに使う）
・無敵モード実装（デバッグに使う）
・画面更新停止機能実装（デバッグに使う）
・Field位置、拡大率調節機能実装
✅デバッグ用パラメータ表示を実装
✅フレームレートに依存せずに、実時間に即してゲームが進行するようにする
・RTTI(実行時型情報)に頼らずに当たり判定処理を分岐できないか模索する（←たぶんできないし、やる必要もない）
✅FPSカウンター表示を実装
✅Fieldクラスをstatic化する
✅画像ハンドルを表象するstaticクラスを作る
✅音声ハンドルを表象するstaticクラスを作る
✅書体ハンドルを表象するstaticクラスを作る
✅DebugParamsクラスを実装する
・enum DifficultyLevelを実装する
・SetParamsクラスを実装する